{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["escapeHtml","unsafe","replace","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","searchResults","searchText","_this2","fetch","then","result","json","items","setState","map","i","index","e","favorite","color","forceUpdate","keywords","text","split","some","includes","_this3","filter","validateText","event","target","value","length","_this4","react_default","a","createElement","className","onChange","handleChange","Button_default","type","onClick","handleSecondClick","variant","style","backgroundColor","fontSize","class","handleClick","title","dangerouslySetInnerHTML","__html","body","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04edf1b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './App.css';\n\n\nfunction escapeHtml(unsafe) {\n  return unsafe\n       .replace(/&amp;/g,'&')\n       .replace(/&lt;/g, '<')\n       .replace(/&gt;/g, '>')\n       .replace(/&quot;/g, '\"')\n       .replace(/&#039;/g,\"'\");\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [],\n      searchResults: [],\n      searchText: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(`https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000`)\n    .then(result=>result.json())\n    .then(items=>this.setState({data: items.map((i, index) => {i.index = index; return i;})}))\n  }\n\n  handleClick(e, i){\n    if (this.state.data[i.index].favorite){ \n      this.state.data[i.index].color = \"#000000\";\n      this.state.data[i.index].favorite = false;\n    } else {\n      this.state.data[i.index].color = \"#237e7f\";\n      this.state.data[i.index].favorite = true;     \n    }\n    this.forceUpdate();\n  }\n\n  validateText(keywords, text){\n    return keywords.split(\", \").some(i => text.includes(i)) || text.split(\" \").some(i => keywords.includes(i))\n  }\n\n  handleSecondClick(e){\n    if (this.state.searchText === \"\"){\n      return;\n    }\n\n    this.setState({searchResults: this.state.data.filter(i => this.validateText(i.keywords, this.state.searchText))});\n  }\n\n  handleChange(event){\n    this.setState({searchText: event.target.value});\n    if (event.target.value === \"\"){\n      this.setState({searchResults: []});\n    }\n  }\n\n  renderIfFavorites(){\n    if (this.state.data.filter(i => i.favorite).length > 0){\n      return \"Favorites\"\n    }\n    return \"None\"\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        Toronto Waste Lookup\n        </header>\n        <div className=\"App-searchbar\">\n          <input text value={this.state.searchText} onChange={(e) => this.handleChange(e)} className=\"App-searchbox\"></input>\n          <Button type=\"submit\" onClick={(e) => this.handleSecondClick(e)} variant=\"contained\" style={{backgroundColor: \"#237e7f\", fontSize: '24px'}}>\n            <i class=\"fa fa-search icon-flipped\"></i>\n          </Button>\n        </div>\n        <div className=\"App-results\">\n        {this.state.searchResults.map(i => {\n          return <div class=\"row result\">\n                  <div class=\"col-left\">\n                    <Button onClick={(e) => this.handleClick(e, i)} style={{fontSize: '24px', color: i.color}}><i class=\"fa fa-star\"></i></Button>\n                    <span class=\"title\">{i.title}</span>\n                  </div>\n                  <div class=\"col-right\" dangerouslySetInnerHTML={{ __html: escapeHtml(i.body) }}></div>\n                </div>\n          }, this)\n        }\n        </div>\n        <div className=\"App-favorites\">\n          <h1 className=\"App-favorites-header\">{this.state.data.filter(i => i.favorite).length === 0 ? \"\" : \"Favorites\"}</h1>\n        {this.state.data.filter(i => i.favorite).map(i => {\n          return <div class=\"row result\">\n                  <div class=\"col-left\">\n                    <Button onClick={(e) => this.handleClick(e, i)} style={{fontSize: '24px', color: i.color}}><i class=\"fa fa-star\"></i></Button>\n                    <span class=\"title\">{i.title}</span>\n                  </div>\n                  <div class=\"col-right\" dangerouslySetInnerHTML={{ __html: escapeHtml(i.body) }}></div>\n                 </div>\n          })\n        }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}